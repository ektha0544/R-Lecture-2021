# 벡터(Vector, 1차원 데이터)
s <- c(1,2,3,4,5,6)
s2 <- c(1:6)  # 시작:끝
s3 <- c(6:1)
s4 <- 1:5
c(1:3, c(4:6))
c(1:30)
seq(1, 100, by=2)  # from, to, increment
seq(from=100, to=1, by=-3)  # from과 to는 생략가능, by는 생략불가
seq(0, 1, by=0.1)
seq(0, 1, length.out=11)  # 0부터 1까지 11개로 나눠서 추출

rep(c(1:3), times=2) # 1부터 3까지 2번 반복
rep(c(1:3), each=2)

# 인덱싱
x <- seq(2, 10, by=2)
x[1]
x[-1] # 첫 번쨰 엘리먼트를 제외한 나머지
x[-3]

# slicing
x[1:3]
x[c(1,3,5)]
x[-c(2,4)] # -는 배제한다는 뜻

# 연산
x <- c(1:4)
y <- c(5:8)
z <- c(3,4)
w <- c(5:7)

x + 2  # 결과 : 3 4 5 6
x + y  # 결과 : 6 8 10 12 
x + z  # 결과 : 4 6 6 8
x + w  # 결과 : 6 8 10 9

length(w)
x[1] x[2] 
x > 2
all(x>2)  # AND : 모두가 TRUE인지 묻는 것
any(x>2)  # OR  : 2보다 큰 숫자가 하나라도 있으면 TRUE

# fancy indexing 
y[x>2]  # 결과 : 7 8
x <- 1:10
head(x)
head(x, 3)
tail(x)
tail(x, 3)

# 벡터 간 집합 연산
x <- 1:3
y <- 3:5
z <- c(3,1,2)

union(x, y)     # union   : 합집합
intersect(x, y) # inters  : 교집합
setdiff(x, y)   # setdiff : 차집합 | x에서 y와 동일한 요소 제외
setdiff(y, x)                     #  y에서 x와 동일한 요소 제외
setequal(x, y) # x와 y가 동일한지 비교
setequal(y, z) # y와 x가 동일한지 비교

# p90 연습문제
## 1
x=c(1:5)
x=c(1:5, c(6:10))

## 2
x=c(1:10)

# 짝수만 출력 
x[x%%2 == 0]

# 3의 배수만 출력 
x <- c(1:100)
x[x%%3==0]

# x와 y의 교집합
intersect(x, y)

x = c(1:100)
x <- x[x%%3==0]

y = c(1:100)
y <- y[y%%4==0]

z = intersect(x,y)
z
